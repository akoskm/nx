diff --git a/.idea/72dc59eeaccdbadea0aee5b43a3f9a53.iml b/.idea/72dc59eeaccdbadea0aee5b43a3f9a53.iml
new file mode 100644
index 0000000000000000000000000000000000000000..d6ebd4805981b8400db3e3291c74a743fef9a824
--- /dev/null
+++ b/.idea/72dc59eeaccdbadea0aee5b43a3f9a53.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000000000000000000000000000000000000..639900d13c6182e452e33a3bd638e70a0146c785
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000000000000000000000000000000000000..0b8bc9ba7da151d6336029cc1a810b51c6bd5f1f
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/72dc59eeaccdbadea0aee5b43a3f9a53.iml" filepath="$PROJECT_DIR$/.idea/72dc59eeaccdbadea0aee5b43a3f9a53.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/src/executors/run-commands/running-tasks.js b/src/executors/run-commands/running-tasks.js
index 5ecf36fd9062120afd92530ba6b15f542d04c810..34adf6d39bf9f1708b7d1fc4e305b00a4ca3e941 100644
--- a/src/executors/run-commands/running-tasks.js
+++ b/src/executors/run-commands/running-tasks.js
@@ -364,6 +364,10 @@ function processEnv(color, cwd, envOptionFromExecutor, envFile) {
     if (color) {
         res.FORCE_COLOR = `${color}`;
     }
+
+    console.log(`finished 'processEnv': processed PATH`)
+    console.log(process.env.PATH)
+
     return res;
 }
 function isReady(readyWhenStatus = [], data) {
diff --git a/src/executors/run-script/run-script.impl.js b/src/executors/run-script/run-script.impl.js
index 161e0f312156d61186afeb93980778f88f8021df..c8a3e57f4203ef46e3bee042520b047d5ab84a3e 100644
--- a/src/executors/run-script/run-script.impl.js
+++ b/src/executors/run-script/run-script.impl.js
@@ -11,6 +11,20 @@ async function default_1(options, context) {
         let command = pm.run(options.script, options.__unparsed__.join(' '));
         let cwd = path.join(context.root, context.projectsConfigurations.projects[context.projectName].root);
         let env = process.env;
+
+        console.log("BEFORE FILTERING PATH");
+        console.log(env.PATH);
+
+
+        console.log("BEFORE RUNNING SCRIPT (UNFILTERED)");
+        (0, child_process_1.execSync)("which pnpm", {
+            stdio: ['inherit', 'inherit', 'inherit'],
+            cwd,
+            env,
+            windowsHide: false,
+        });
+        console.log("AFTER RUNNING SCRIPT (UNFILTERED)");
+
         // when running nx through npx with node_modules installed with npm, the path gets modified to include the full workspace path with the node_modules folder
         // This causes issues when running in a pty process, so we filter out the node_modules paths from the PATH
         // Since the command here will be run with the package manager script command, the path will be modified again within the PTY process itself.
@@ -18,6 +32,19 @@ async function default_1(options, context) {
             .filter((p) => !p.startsWith(path.join(context.root, 'node_modules')))
             .join(path.delimiter) ?? '';
         env.PATH = filteredPath;
+
+        console.log("AFTER FILTERING PATH");
+        console.log(env.PATH);
+
+        console.log("BEFORE RUNNING SCRIPT (FILTERED)");
+        (0, child_process_1.execSync)("which pnpm", {
+            stdio: ['inherit', 'inherit', 'inherit'],
+            cwd,
+            env,
+            windowsHide: false,
+        });
+        console.log("AFTER RUNNING SCRIPT (FILTERED)");
+
         if (pseudo_terminal_1.PseudoTerminal.isSupported()) {
             await ptyProcess(command, cwd, env);
         }
diff --git a/src/tasks-runner/task-orchestrator.js b/src/tasks-runner/task-orchestrator.js
index b8754a79c8d3166c76ad3eb78f53bec3926e25cc..91b0a9c51db3561f55b87c41770967a8325d3637 100644
--- a/src/tasks-runner/task-orchestrator.js
+++ b/src/tasks-runner/task-orchestrator.js
@@ -243,6 +243,11 @@ class TaskOrchestrator {
     // endregion Batch
     // region Single Task
     async applyFromCacheOrRunTask(doNotSkipCache, task, groupId) {
+
+        console.log(`[${task.id}] applyFromCacheOrRunTask`);
+        console.log(`[${task.id}] PATH: ${process.env.PATH}`);
+        console.log(process.env.PATH);
+
         // Wait for task to be processed
         const taskSpecificEnv = await this.processedTasks.get(task.id);
         await this.preRunSteps([task], { groupId });
