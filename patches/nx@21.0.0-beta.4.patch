diff --git a/.idea/b2e979e592feb13958efd455eca4c90c.iml b/.idea/b2e979e592feb13958efd455eca4c90c.iml
new file mode 100644
index 0000000000000000000000000000000000000000..d6ebd4805981b8400db3e3291c74a743fef9a824
--- /dev/null
+++ b/.idea/b2e979e592feb13958efd455eca4c90c.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000000000000000000000000000000000000..639900d13c6182e452e33a3bd638e70a0146c785
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000000000000000000000000000000000000..73e43bc2a07ba072afd915e627ff4203fb58ed3c
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/b2e979e592feb13958efd455eca4c90c.iml" filepath="$PROJECT_DIR$/.idea/b2e979e592feb13958efd455eca4c90c.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/src/tasks-runner/is-tui-enabled.js b/src/tasks-runner/is-tui-enabled.js
index d497b19c67c50d1e555c4dd1104531e72212e3ca..9758566f591fe401bbd82da675bdac7fac3209ae 100644
--- a/src/tasks-runner/is-tui-enabled.js
+++ b/src/tasks-runner/is-tui-enabled.js
@@ -5,14 +5,18 @@ const devkit_internals_1 = require("../devkit-internals");
 let tuiEnabled = undefined;
 function isTuiEnabled(nxJson) {
     if (tuiEnabled !== undefined) {
+        console.log("[Patched Nx]: tuiEnabled is already set, returning its value", tuiEnabled);
         return tuiEnabled;
     }
     // If the current terminal/environment is not capable of displaying the TUI, we don't run it
     const isWindows = process.platform === 'win32';
+    console.log("[Patched Nx]: isWindows:", isWindows);
     const isCapable = process.stderr.isTTY && isUnicodeSupported();
+    console.log("[Patched Nx]: isCapable:", isCapable);
     // Windows is not working well right now, temporarily disable it on Windows even if it has been specified as enabled
     // TODO(@JamesHenry): Remove this check once Windows issues are fixed.
     if (!isCapable || isWindows) {
+        console.log("[Patched Nx]: TUI is not capable of displaying, will NOT run");
         tuiEnabled = false;
         process.env.NX_TUI = 'false';
         return tuiEnabled;
@@ -20,6 +24,7 @@ function isTuiEnabled(nxJson) {
     // The environment variable takes precedence over the nx.json config
     if (typeof process.env.NX_TUI === 'string') {
         tuiEnabled = process.env.NX_TUI === 'true' ? true : false;
+        console.log("[Patched Nx]: NX_TUI is set explicitly: ", tuiEnabled);
         return tuiEnabled;
     }
     // Only read from disk if nx.json config is not already provided (and we have not been able to determine tuiEnabled based on the above checks)
@@ -28,14 +33,18 @@ function isTuiEnabled(nxJson) {
     }
     // Respect user config
     if (typeof nxJson.tui?.enabled === 'boolean') {
+        console.log("[Patched Nx]: TUI is configured in nx.json: ", nxJson.tui?.enabled);
         tuiEnabled = Boolean(nxJson.tui?.enabled);
     }
     else {
         // Default to enabling the TUI if the system is capable of displaying it
+        console.log("[Patched Nx]: TUI is not configured in nx.json, defaulting to enabled");
         tuiEnabled = true;
     }
     // Also set the environment variable for consistency and ease of checking on the rust side, for example
     process.env.NX_TUI = tuiEnabled.toString();
+    console.log("[Patched Nx]: Setting NX_TUI to result: ", tuiEnabled);
+
     return tuiEnabled;
 }
 // Credit to https://github.com/sindresorhus/is-unicode-supported/blob/e0373335038856c63034c8eef6ac43ee3827a601/index.js
diff --git a/src/tasks-runner/task-orchestrator.js b/src/tasks-runner/task-orchestrator.js
index 01d88e6def35cc032c6b5c250c270f35952e0094..3d458ad9a069898c3e1760d1b4d1111694c7463d 100644
--- a/src/tasks-runner/task-orchestrator.js
+++ b/src/tasks-runner/task-orchestrator.js
@@ -21,6 +21,7 @@ const noop_child_process_1 = require("./running-tasks/noop-child-process");
 const task_env_1 = require("./task-env");
 const tasks_schedule_1 = require("./tasks-schedule");
 const utils_1 = require("./utils");
+const {isCacheableTask} = require("./utils");
 class TaskOrchestrator {
     // endregion internal state
     constructor(hasher, initiatingProject, projectGraph, taskGraph, nxJson, options, bail, daemon, outputStyle, taskGraphForHashing = taskGraph) {
@@ -51,6 +52,10 @@ class TaskOrchestrator {
         this.bailed = false;
         this.runningContinuousTasks = new Map();
         this.cleaningUp = false;
+
+        const anyTaskCacheable = Object.values(this.taskGraph.tasks).some((t) => isCacheableTask(t, this.options));
+        console.log("[Patched Nx]: anyTaskCacheable: ", anyTaskCacheable, `[${process.pid}]`)
+
     }
     async init() {
         // Init the ForkedProcessTaskRunner, TasksSchedule, and Cache
@@ -244,17 +249,27 @@ class TaskOrchestrator {
         // Wait for task to be processed
         const taskSpecificEnv = await this.processedTasks.get(task.id);
         await this.preRunSteps([task], { groupId });
+        console.log("[Patched Nx]: initiatingProject: ", this.initiatingProject, `[${process.pid}]`)
+        console.log("[Patched Nx]: NX_STREAM_OUTPUT: ", process.env.NX_STREAM_OUTPUT)
         const pipeOutput = await this.pipeOutputCapture(task);
         // obtain metadata
         const temporaryOutputPath = this.cache.temporaryOutputPath(task);
         const streamOutput = this.outputStyle === 'static'
             ? false
             : (0, utils_1.shouldStreamOutput)(task, this.initiatingProject);
-        let env = pipeOutput
-            ? (0, task_env_1.getEnvVariablesForTask)(task, taskSpecificEnv, process.env.FORCE_COLOR === undefined
+        console.log("[Patched Nx]: streamOutput: ", streamOutput)
+
+
+        let env;
+        if (pipeOutput) {
+            console.log("[Patched Nx]: Pipe Output is enabled")
+            env = (0, task_env_1.getEnvVariablesForTask)(task, taskSpecificEnv, process.env.FORCE_COLOR === undefined
                 ? 'true'
                 : process.env.FORCE_COLOR, this.options.skipNxCache, this.options.captureStderr, null, null)
-            : (0, task_env_1.getEnvVariablesForTask)(task, taskSpecificEnv, undefined, this.options.skipNxCache, this.options.captureStderr, temporaryOutputPath, streamOutput);
+        } else {
+            console.log("[Patched Nx]: Pipe Output is disabled")
+            env = (0, task_env_1.getEnvVariablesForTask)(task, taskSpecificEnv, undefined, this.options.skipNxCache, this.options.captureStderr, temporaryOutputPath, streamOutput);
+        }
         let results = doNotSkipCache ? await this.applyCachedResults([task]) : [];
         // the task wasn't cached
         if (results.length === 0) {
@@ -273,6 +288,7 @@ class TaskOrchestrator {
     async runTask(task, streamOutput, env, temporaryOutputPath, pipeOutput) {
         const shouldPrefix = streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';
         const targetConfiguration = (0, utils_1.getTargetConfigurationForTask)(task, this.projectGraph);
+        console.log("[Patched Nx]: Task ID: ", task.id, `[${process.pid}`)
         if (process.env.NX_RUN_COMMANDS_DIRECTLY !== 'false' &&
             targetConfiguration.executor === 'nx:run-commands' &&
             !shouldPrefix) {
@@ -349,6 +365,8 @@ class TaskOrchestrator {
         }
         else {
             // cache prep
+            console.log("[Patched Nx]: pipeOutput:", pipeOutput)
+            console.log("[Patched Nx]: streamOutput:", streamOutput)
             const runningTask = await this.runTaskInForkedProcess(task, env, pipeOutput, temporaryOutputPath, streamOutput);
             if (this.tuiEnabled && runningTask instanceof pseudo_terminal_1.PseudoTtyProcess) {
                 // This is an external of a the pseudo terminal where a task is running and can be passed to the TUI
@@ -529,15 +547,25 @@ class TaskOrchestrator {
     //endregion Lifecycle
     // region utils
     async pipeOutputCapture(task) {
+        console.log("[Patched Nx]: Determining to pipe output")
         try {
             if (process.env.NX_NATIVE_COMMAND_RUNNER !== 'false') {
+                console.log("[Patched Nx]: NX_NATIVE_COMMAND_RUNNER is true, will pipe output")
                 return true;
             }
             const { schema } = (0, utils_1.getExecutorForTask)(task, this.projectGraph);
-            return (schema.outputCapture === 'pipe' ||
+
+
+
+             const result = (schema.outputCapture === 'pipe' ||
                 process.env.NX_STREAM_OUTPUT === 'true');
+
+             console.log("[Patched Nx]: schema.outputCapture: ", schema.outputCapture)
+             console.log("[Patched Nx]: NX_STREAM_OUTPUT: ", process.env.NX_STREAM_OUTPUT)
+             console.log("[Patched Nx]: Pipe Output: ", result)
         }
         catch (e) {
+            console.log("[Patched Nx]: Error, will not pipe output: ", e)
             return false;
         }
     }
diff --git a/src/tasks-runner/utils.js b/src/tasks-runner/utils.js
index 83fe5d41b3325124956683ce10e58a3c5eb84506..83ea7b0979b7028a6e1e6c1181ee7631d6e3b4ee 100644
--- a/src/tasks-runner/utils.js
+++ b/src/tasks-runner/utils.js
@@ -370,14 +370,27 @@ function getSerializedArgsForTask(task, isVerbose) {
 }
 function shouldStreamOutput(task, initiatingProject) {
     // For now, disable streaming output on the JS side when running the TUI
-    if ((0, is_tui_enabled_1.isTuiEnabled)())
+    if ((0, is_tui_enabled_1.isTuiEnabled)()) {
+        console.log("[Patched Nx]: TUI is enabled, will NOT stream output", `[${process.pid}]`);
         return false;
-    if (process.env.NX_STREAM_OUTPUT === 'true')
+    }
+
+    if (process.env.NX_STREAM_OUTPUT === 'true') {
+        console.log("[Patched Nx]: NX_STREAM_OUTPUT is true, will stream output", `[${process.pid}]`);
         return true;
-    if (longRunningTask(task))
+    }
+
+    if (longRunningTask(task)) {
+        console.log("[Patched Nx]: Long running task, will stream output", `[${process.pid}]`);
         return true;
-    if (task.target.project === initiatingProject)
+    }
+
+    if (task.target.project === initiatingProject) {
+        console.log("[Patched Nx]: Task is from initiating project, will stream output", `[${process.pid}]`);
         return true;
+    }
+
+    console.log("[Patched Nx]: Will NOT stream output");
     return false;
 }
 function isCacheableTask(task, options) {
